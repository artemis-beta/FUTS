{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FORTRAN Unit Test Framework # FortUTF is a purely FORTRAN-ic unit test framework compatible with FORTRAN 90 code. It contains a set of subroutines which can be used to check outputs of methods. FortUTF has been confirmed to work under Linux, macOS and Windows via MSYS.","title":"Index Page"},{"location":"#fortran-unit-test-framework","text":"FortUTF is a purely FORTRAN-ic unit test framework compatible with FORTRAN 90 code. It contains a set of subroutines which can be used to check outputs of methods. FortUTF has been confirmed to work under Linux, macOS and Windows via MSYS.","title":"FORTRAN Unit Test Framework"},{"location":"assertions/","text":"Assertions # Assertions can confirm the properties of a value, or where appropriate, those of all values within an array. Comparisons # Subroutine Description ASSERT_EQUAL(A, B) Assert that \\(A = B\\) ASSERT_NOT_EQUAL(A, B) Assert that \\(A \\neq B\\) ASSERT_ALMOST_EQUAL(A, B, REL_TOL=1E-9) Assert that \\(A \\approx B\\) with a given relative tolerance, the default being \\(10^{-9}\\) if not specified ASSERT_GREATER_THAN(A, B) Assert that \\(A \\gt B\\) ASSERT_LESS_THAN(A, B) Assert that \\(A \\lt B\\) ASSERT_GREATER_THAN_EQUAL(A, B) Assert that \\(A \\geq B\\) ASSERT_LESS_THAN_EQUAL(A, B) Assert that \\(A \\leq B\\) Logicals # Subroutine Description ASSERT_TRUE(A) Assert that \\(A\\) returns .TRUE. ASSERT_FALSE(A) Assert that \\(A\\) returns .FALSE. Type Checking # Subroutine Description ASSERT_IS_REAL(A) Assert that \\(A\\) is a REAL type ASSERT_IS_INT(A) Assert that \\(A\\) is a INTEGER type ASSERT_IS_CHARACTER(A) Assert that \\(A\\) is a CHARACTER type","title":"Available Assertions"},{"location":"assertions/#assertions","text":"Assertions can confirm the properties of a value, or where appropriate, those of all values within an array.","title":"Assertions"},{"location":"assertions/#comparisons","text":"Subroutine Description ASSERT_EQUAL(A, B) Assert that \\(A = B\\) ASSERT_NOT_EQUAL(A, B) Assert that \\(A \\neq B\\) ASSERT_ALMOST_EQUAL(A, B, REL_TOL=1E-9) Assert that \\(A \\approx B\\) with a given relative tolerance, the default being \\(10^{-9}\\) if not specified ASSERT_GREATER_THAN(A, B) Assert that \\(A \\gt B\\) ASSERT_LESS_THAN(A, B) Assert that \\(A \\lt B\\) ASSERT_GREATER_THAN_EQUAL(A, B) Assert that \\(A \\geq B\\) ASSERT_LESS_THAN_EQUAL(A, B) Assert that \\(A \\leq B\\)","title":"Comparisons"},{"location":"assertions/#logicals","text":"Subroutine Description ASSERT_TRUE(A) Assert that \\(A\\) returns .TRUE. ASSERT_FALSE(A) Assert that \\(A\\) returns .FALSE.","title":"Logicals"},{"location":"assertions/#type-checking","text":"Subroutine Description ASSERT_IS_REAL(A) Assert that \\(A\\) is a REAL type ASSERT_IS_INT(A) Assert that \\(A\\) is a INTEGER type ASSERT_IS_CHARACTER(A) Assert that \\(A\\) is a CHARACTER type","title":"Type Checking"},{"location":"usage/","text":"Adding to your CMake project # To use the framework include the cmake/forrtutf.cmake file within the CMakeLists.txt of your project. In addition you must set either the FORTUTF_PROJECT_SRC_FILES variable to point to the location of the FORTRAN source files for your project, or the FORTUTF_PROJECT_SRC_LIBRARY variable to give the location of the library generated by building your project. By default FortUTF will assume tests to lie within ${CMAKE_SOURCE_DIR}/tests , you can override this by setting FORTUTF_PROJECT_TEST_DIR to your tests directory. It is recommended that compiling and running of the tests be controlled by a CMake option: # Project CMakeLists.txt OPTION( BUILD_TESTS \"Build Project Unit tests\" OFF ) IF( BUILD_TESTS ) # set required project files variable e.g. files in 'src' directory within the project directory FILE( GLOB_RECURSE PROJECT_SRC_FILES ${CMAKE_SOURCE_DIR}/src/*.f90 ) # Include the FortUTF test finding script SET( FORTUTF_ROOT /path/to/FortUTF/folder ) INCLUDE( ${FORTUTF_ROOT}/cmake/fortutf.cmake ) ... ENDIF() The script will automatically locate any tests within the project matching the pattern test_*.f90 , and create a new script run_tests.f90 within the tests directory which will be compiled. Writing Unit tests # To write unit tests create an F90 script prefixed with test_ in a test directory and write the tests as subroutines within a modules. The subroutine TAG_TEST should be called prior to the assertion to provide an identifier for recognising the test within the results should it fail. Example # Project source file # ! my_functions.f90 MODULE MY_MODULE IMPLICIT NONE CONTAINS REAL(8) FUNCTION ADDER(NUMBER_1, NUMBER_2) REAL(8), INTENT(IN) :: NUMBER_1, NUMBER_2 ADDER = NUMBER_1 + NUMBER_2 END FUNCTION END MODULE Test source file # ! test_adder.f90 MODULE TEST_MY_FUNCTIONS USE FORTUTF ! use FortUTF to make tests IMPLICIT NONE CONTAINS SUBROUTINE TEST_ADDER USE MY_MODULE, ONLY: ADDER CALL TAG_TEST(\"TEST_ADDER_FUNCTION\") ! Set a unique identifier to recognise this test CALL ASSERT_EQUAL(ADDER(2, 3), 5) END SUBROUTINE END MODULE It is recommended that the layout of your test scripts mirror that of your sources, i.e. each source file will be accompanied by a relevant test file containing a module of subroutines for checking its methods.","title":"Users Guide"},{"location":"usage/#adding-to-your-cmake-project","text":"To use the framework include the cmake/forrtutf.cmake file within the CMakeLists.txt of your project. In addition you must set either the FORTUTF_PROJECT_SRC_FILES variable to point to the location of the FORTRAN source files for your project, or the FORTUTF_PROJECT_SRC_LIBRARY variable to give the location of the library generated by building your project. By default FortUTF will assume tests to lie within ${CMAKE_SOURCE_DIR}/tests , you can override this by setting FORTUTF_PROJECT_TEST_DIR to your tests directory. It is recommended that compiling and running of the tests be controlled by a CMake option: # Project CMakeLists.txt OPTION( BUILD_TESTS \"Build Project Unit tests\" OFF ) IF( BUILD_TESTS ) # set required project files variable e.g. files in 'src' directory within the project directory FILE( GLOB_RECURSE PROJECT_SRC_FILES ${CMAKE_SOURCE_DIR}/src/*.f90 ) # Include the FortUTF test finding script SET( FORTUTF_ROOT /path/to/FortUTF/folder ) INCLUDE( ${FORTUTF_ROOT}/cmake/fortutf.cmake ) ... ENDIF() The script will automatically locate any tests within the project matching the pattern test_*.f90 , and create a new script run_tests.f90 within the tests directory which will be compiled.","title":"Adding to your CMake project"},{"location":"usage/#writing-unit-tests","text":"To write unit tests create an F90 script prefixed with test_ in a test directory and write the tests as subroutines within a modules. The subroutine TAG_TEST should be called prior to the assertion to provide an identifier for recognising the test within the results should it fail.","title":"Writing Unit tests"},{"location":"usage/#example","text":"","title":"Example"},{"location":"usage/#project-source-file","text":"! my_functions.f90 MODULE MY_MODULE IMPLICIT NONE CONTAINS REAL(8) FUNCTION ADDER(NUMBER_1, NUMBER_2) REAL(8), INTENT(IN) :: NUMBER_1, NUMBER_2 ADDER = NUMBER_1 + NUMBER_2 END FUNCTION END MODULE","title":"Project source file"},{"location":"usage/#test-source-file","text":"! test_adder.f90 MODULE TEST_MY_FUNCTIONS USE FORTUTF ! use FortUTF to make tests IMPLICIT NONE CONTAINS SUBROUTINE TEST_ADDER USE MY_MODULE, ONLY: ADDER CALL TAG_TEST(\"TEST_ADDER_FUNCTION\") ! Set a unique identifier to recognise this test CALL ASSERT_EQUAL(ADDER(2, 3), 5) END SUBROUTINE END MODULE It is recommended that the layout of your test scripts mirror that of your sources, i.e. each source file will be accompanied by a relevant test file containing a module of subroutines for checking its methods.","title":"Test source file"}]}